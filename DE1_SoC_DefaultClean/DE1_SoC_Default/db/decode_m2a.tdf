--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=15 LPM_WIDTH=4 data eq
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 16 
SUBDESIGN decode_m2a
( 
	data[3..0]	:	input;
	eq[14..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire1	: WIRE;
	enable_wire2	: WIRE;
	eq_node[14..0]	: WIRE;
	eq_wire1w[7..0]	: WIRE;
	eq_wire2w[7..0]	: WIRE;
	w_anode1959w[3..0]	: WIRE;
	w_anode1976w[3..0]	: WIRE;
	w_anode1986w[3..0]	: WIRE;
	w_anode1996w[3..0]	: WIRE;
	w_anode2006w[3..0]	: WIRE;
	w_anode2016w[3..0]	: WIRE;
	w_anode2026w[3..0]	: WIRE;
	w_anode2036w[3..0]	: WIRE;
	w_anode2046w[3..0]	: WIRE;
	w_anode2057w[3..0]	: WIRE;
	w_anode2067w[3..0]	: WIRE;
	w_anode2077w[3..0]	: WIRE;
	w_anode2087w[3..0]	: WIRE;
	w_anode2097w[3..0]	: WIRE;
	w_anode2107w[3..0]	: WIRE;
	w_anode2117w[3..0]	: WIRE;

BEGIN 
	data_wire[2..0] = data[2..0];
	enable_wire1 = (! data[3..3]);
	enable_wire2 = data[3..3];
	eq[] = eq_node[];
	eq_node[] = ( eq_wire2w[6..0], eq_wire1w[]);
	eq_wire1w[] = ( w_anode2036w[3..3], w_anode2026w[3..3], w_anode2016w[3..3], w_anode2006w[3..3], w_anode1996w[3..3], w_anode1986w[3..3], w_anode1976w[3..3], w_anode1959w[3..3]);
	eq_wire2w[] = ( w_anode2117w[3..3], w_anode2107w[3..3], w_anode2097w[3..3], w_anode2087w[3..3], w_anode2077w[3..3], w_anode2067w[3..3], w_anode2057w[3..3], w_anode2046w[3..3]);
	w_anode1959w[] = ( (w_anode1959w[2..2] & (! data_wire[2..2])), (w_anode1959w[1..1] & (! data_wire[1..1])), (w_anode1959w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1976w[] = ( (w_anode1976w[2..2] & (! data_wire[2..2])), (w_anode1976w[1..1] & (! data_wire[1..1])), (w_anode1976w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1986w[] = ( (w_anode1986w[2..2] & (! data_wire[2..2])), (w_anode1986w[1..1] & data_wire[1..1]), (w_anode1986w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1996w[] = ( (w_anode1996w[2..2] & (! data_wire[2..2])), (w_anode1996w[1..1] & data_wire[1..1]), (w_anode1996w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode2006w[] = ( (w_anode2006w[2..2] & data_wire[2..2]), (w_anode2006w[1..1] & (! data_wire[1..1])), (w_anode2006w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode2016w[] = ( (w_anode2016w[2..2] & data_wire[2..2]), (w_anode2016w[1..1] & (! data_wire[1..1])), (w_anode2016w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode2026w[] = ( (w_anode2026w[2..2] & data_wire[2..2]), (w_anode2026w[1..1] & data_wire[1..1]), (w_anode2026w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode2036w[] = ( (w_anode2036w[2..2] & data_wire[2..2]), (w_anode2036w[1..1] & data_wire[1..1]), (w_anode2036w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode2046w[] = ( (w_anode2046w[2..2] & (! data_wire[2..2])), (w_anode2046w[1..1] & (! data_wire[1..1])), (w_anode2046w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode2057w[] = ( (w_anode2057w[2..2] & (! data_wire[2..2])), (w_anode2057w[1..1] & (! data_wire[1..1])), (w_anode2057w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode2067w[] = ( (w_anode2067w[2..2] & (! data_wire[2..2])), (w_anode2067w[1..1] & data_wire[1..1]), (w_anode2067w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode2077w[] = ( (w_anode2077w[2..2] & (! data_wire[2..2])), (w_anode2077w[1..1] & data_wire[1..1]), (w_anode2077w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode2087w[] = ( (w_anode2087w[2..2] & data_wire[2..2]), (w_anode2087w[1..1] & (! data_wire[1..1])), (w_anode2087w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode2097w[] = ( (w_anode2097w[2..2] & data_wire[2..2]), (w_anode2097w[1..1] & (! data_wire[1..1])), (w_anode2097w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode2107w[] = ( (w_anode2107w[2..2] & data_wire[2..2]), (w_anode2107w[1..1] & data_wire[1..1]), (w_anode2107w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode2117w[] = ( (w_anode2117w[2..2] & data_wire[2..2]), (w_anode2117w[1..1] & data_wire[1..1]), (w_anode2117w[0..0] & data_wire[0..0]), enable_wire2);
END;
--VALID FILE
